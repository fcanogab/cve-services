const CONSTANTS = require('../constants')
const Org = require('../model/org')
const User = require('../model/user')
const cveSchema = require('./jsonSchema')
const logger = require('./logger')
const Validator = require('jsonschema').Validator
const v = new Validator()
const uuidAPIKey = require('uuid-apikey')
const uuid = require('uuid')
const utils = require('../utils/utils')
const repositoryFactory = require('../repositories/repositoryFactory')

function createCtxAndReqUUID (req, res, next) {
  try {
    req.ctx = {
      uuid: uuid.v4(),
      org: req.header(CONSTANTS.AUTH_HEADERS.ORG),
      user: req.header(CONSTANTS.AUTH_HEADERS.USER),
      key: req.header(CONSTANTS.AUTH_HEADERS.KEY),
      repositories: new repositoryFactory()
    }

    logger.info(JSON.stringify({ uuid: req.ctx.uuid, path: req.path }))
    next()
  } catch (err) {
    next(err)
  }
}

async function validateUser (req, res, next) {
  const org = req.ctx.org
  const user = req.ctx.user
  const key = req.ctx.key

  try {
    if (org === undefined) {
      return res.status(400).json({ error: 'BAD_REQUEST', message: `${CONSTANTS.AUTH_HEADERS.ORG} header field required.` })
    }

    if (user === undefined) {
      return res.status(400).json({ error: 'BAD_REQUEST', message: `${CONSTANTS.AUTH_HEADERS.USER} header field required.'` })
    }

    if (key === undefined) {
      return res.status(400).json({ error: 'BAD_REQUEST', message: `${CONSTANTS.AUTH_HEADERS.KEY} header field required.` })
    }

    logger.info('Authenticating user: ' + user)
    const orgUUID = await utils.getOrgUUID(org) // userUUID may be null if user does not exist
    if (!orgUUID) {
      logger.info(org + ' CNA does not exist. User authentication FAILED for ' + user)
      return res.status(401).json({ error: 'UNAUTHORIZED', message: 'Unauthorized' })
    }

    const result = await User.findOne().byUserNameAndOrgUUID(user, orgUUID)
    if (!result) {
      logger.warn('User not found. User authentication FAILED for ' + user)
      return res.status(401).json({ error: 'UNAUTHORIZED', message: 'Unauthorized' })
    }

    if (!result.active) {
      logger.warn('User deactivated. Authentication failed for ' + user)
      return res.status(401).json({ error: 'UNAUTHORIZED', message: 'Unauthorized' })
    }

    if (uuidAPIKey.toAPIKey(result.secret) !== key) {
      logger.warn('Incorrect apikey. User authentication FAILED for ' + user)
      return res.status(401).json({ error: 'UNAUTHORIZED', message: 'Unauthorized' })
    }

    logger.info('SUCCESSFUL user authentication for ' + user)
    next()
  } catch (err) {
    next(err)
  }
}

// Checks that the requester belongs to an org that has the 'SECREATARIAT' role
async function onlySecretariat (req, res, next) {
  const org = req.ctx.org

  try {
    const isSec = await utils.isSecretariat(org)
    if (!isSec) {
      logger.info({ message: org + ' is NOT a ' + CONSTANTS.AUTH_ROLE_ENUM.SECRETARIAT })
      return res.status(403).json(CONSTANTS.SECRETARIAT_ONLY)
    }

    logger.info({ message: 'Confirmed ' + org + ' as a ' + CONSTANTS.AUTH_ROLE_ENUM.SECRETARIAT })
    next()
  } catch (err) {
    next(err)
  }
}

// Checks that the requester belongs to an org that has the 'CNA' role
async function onlyCnas (req, res, next) {
  const shortName = req.ctx.org

  try {
    const org = await Org.findOne().byShortName(shortName) // org exists
    if (org.authority.active_roles.includes(CONSTANTS.AUTH_ROLE_ENUM.SECRETARIAT)) {
      logger.info({ message: org.short_name + ' is a ' + CONSTANTS.AUTH_ROLE_ENUM.SECRETARIAT + ' so until Root CNAs are implemented this role is allowed.' })
      next()
    } else if (org.authority.active_roles.includes(CONSTANTS.AUTH_ROLE_ENUM.CNA)) { // the org is a CNA
      logger.info({ message: 'Confirmed ' + org.short_name + ' as a ' + CONSTANTS.AUTH_ROLE_ENUM.CNA })
      next()
    } else {
      logger.info({ message: org.short_name + ' is NOT a ' + CONSTANTS.AUTH_ROLE_ENUM.CNA })
      return res.status(403).json(CONSTANTS.CNA_ONLY)
    }
  } catch (err) {
    next(err)
  }
}

// TODO: Request body sanitation, better user messages, and use correct status codes
function validateCveJsonSchema (req, res, next) {
  if (req.method.toUpperCase() === 'POST') {
    const cve = req.body
    const cveState = cve.CVE_data_meta.STATE
    let schema
    logger.info('Validating CVE JSON schema.')

    // For validating schema 4.0
    // if (cveState === 'PUBLIC' || cveState === 'RESERVED' || cveState === 'REJECT') {
    //   schema = cveSchema.cveSchema4
    // } else {
    //   return res.status(400).json({ message: 'CVE JSON schema validation FAILED.', errors: ['instance.CVE_data_meta.STATE is not one of enum values'] })
    // }

    // For validating schema 5.0
    if (cveState === 'PUBLIC') {
      schema = cveSchema.publicSchema
      v.addSchema(schema, '/https://www.first.org/cvss/cvss-v3.1.json?20190610')
      v.addSchema(schema, '/https://www.first.org/cvss/cvss-v3.0.json?20170531')
      v.addSchema(schema, '/https://www.first.org/cvss/cvss-v2.0.json?20170531')
    } else if (cveState === 'RESERVED') {
      schema = cveSchema.reservedSchema
    } else if (cveState === 'REJECT') {
      schema = cveSchema.rejectSchema
    } else {
      return res.status(400).json({ message: 'CVE JSON schema validation FAILED.', errors: ['instance.CVE_data_meta.STATE is not one of enum values'] })
    }

    const result = v.validate(cve, schema, { nestedErrors: true })

    if (result.valid) {
      logger.info('SUCCESSFUL CVE JSON schema validation.')
      next()
    } else {
      logger.error(result)
      logger.error('CVE JSON schema validation FAILED.')

      const temp = result.toString().split('\n')
      const errors = []
      temp.forEach((error) => {
        if (error !== '') {
          const array = error.split(':', 2)
          errors.push(array[1].trim())
        }
      })

      return res.status(400).json({ message: 'CVE JSON schema validation FAILED.', errors: errors })
    }
  } else {
    return res.status(400).send('Bad Request')
  }
}

function errorHandler (err, req, res, next) {
  logger.error(err.stack)
  res.status(500).json(CONSTANTS.SERVICE_NOT_AVAILABLE)
}

module.exports = {
  validateUser,
  onlySecretariat,
  onlyCnas,
  createCtxAndReqUUID,
  validateCveJsonSchema,
  errorHandler
}
